buildscript {
  repositories {
    mavenCentral()
    maven {
      url 'https://artifactory.wetransform.to/artifactory/libs-release-local'
    }
    maven {
      url 'https://artifactory.wetransform.to/artifactory/libs-snapshot-local'
    }
  }
  dependencies {
    classpath 'to.wetransform.hale:gradle-hale-plugin:1.2.0-SNAPSHOT'
    classpath 'commons-io:commons-io:2.11.0'
  }
}

apply plugin: 'to.wetransform.hale'

hale {
  cliVersion = '4.2.0-SNAPSHOT'
}

import org.apache.commons.io.FileUtils

/*
 * Configuration file
 */

project.ext.configBasePath = project.file(project.hasProperty('configBasePath') ? project.getProperty('configBasePath') : '.')
def json = new groovy.json.JsonSlurper()
def config = json.parse(file(project.hasProperty('configFile') ? project.getProperty('configFile') : 'config.json'))

/*
 * Transformation tasks
 */

task('transform-all') {
  description 'FÃ¼hrt alle Transformationen durch'
  group 'Transformation'
}

config.targetEPSG.each { epsg ->
  config.transformations.each { name, settings ->

    def projectFile = new File(configBasePath, settings.project)

    // target
    String targetName = "$name-$epsg"
    File targetFolder = settings.targetFolder ? new File(configBasePath, settings.targetFolder) : new File('result', targetName)

    task("transform-$name-$epsg", type: hale.transform()) {
      assert projectFile != null
      transformation = projectFile

      settings.shapefiles.each { shapefile ->
        source(new File(configBasePath, shapefile.path)) {
          provider 'eu.esdihumboldt.hale.io.shape.reader.instance'
          include "${shapefile.filename}"
          setting 'contentType', 'eu.esdihumboldt.hale.io.shp'
          setting 'typename', "${shapefile.typename}"
        }
      }

      settings.table.sheets.each { sheet ->
        source(new File(configBasePath, settings.table.path)) {
          provider 'eu.esdihumboldt.hale.io.xls.reader.instance'
          setting 'contentType', 'eu.esdihumboldt.hale.io.xls.xlsx'
          setting 'typename', "${sheet.typename}"
          setting 'sheetIndex', "${sheet.index}"
          setting 'skip', '2'
        }
      }

      if (settings.sourceFilter) {
        filterArgs << '-filter'
        filterArgs << settings.sourceFilter
      }

      logFolder = targetFolder

      target(new File(targetFolder, settings.targetFileName ?: 'output.gpkg')) {
        provider 'eu.esdihumboldt.hale.io.geopackage.instance.writer'

        setting 'crs', "code:EPSG:$epsg"
      }

      // XML schema validation
      // validate('eu.esdihumboldt.hale.io.xml.validator')

      printStacktrace = true
      trustGroovy = true

      // ignore failure -> task will be successful
      ignoreExitValue = true

      description "Runs a transformation based on the project ${projectFile.name}."
      group 'Transformation'
    }

    tasks["transform-$name-$epsg"].doFirst {
      targetFolder.mkdirs()
      FileUtils.cleanDirectory(targetFolder)
    }
    
    tasks['transform-all'].dependsOn("transform-$name-$epsg")
  }
}


configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

/*
 * Gradle wrapper
 */
wrapper {
  gradleVersion = '8.7'
}
